name: Build
on:
  workflow_call:
    inputs:
      release:
        required: false
        type: boolean
        default: false
      version-operation:
        type: string
        default: commit-digest-as-prerelease
    outputs:
      version-commit-objects:
        value: ${{ jobs.version.outputs.commit-objects }}
      version-commit-digest:
        value: ${{ jobs.version.outputs.commit-digest }}
      effective-version:
        value: ${{ jobs.version.outputs.version }}
      component-descriptor:
        value: ${{ jobs.component_descriptor.outputs.component-descriptor }}

jobs:
  params:
    runs-on: ubuntu-latest
    outputs:
      ocm_repository: ${{ steps.params.outputs.ocm_repository }}
      oci_repository: ${{ steps.params.outputs.oci_repository }}
      oci_platforms: ${{ steps.params.outputs.oci_platforms }}
    steps:
      - name: params
        id: params
        run: |
          if ${{ inputs.release || false }}; then
            ocm_repo='europe-docker.pkg.dev/gardener-project/releases'
            oci_repo='europe-docker.pkg.dev/gardener-project/releases/cicd'
          else
            ocm_repo='europe-docker.pkg.dev/gardener-project/snapshots'
            oci_repo='europe-docker.pkg.dev/gardener-project/snapshots/cicd'
          fi
          oci_platforms='linux/arm64,linux/amd64'

          echo "ocm_repository=${ocm_repo}" >> ${GITHUB_OUTPUT}
          echo "oci_repository=${oci_repo}" >> ${GITHUB_OUTPUT}
          echo "oci_platforms=${oci_platforms}" >> ${GITHUB_OUTPUT}

  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit-objects: ${{ steps.version.outputs.commit-objects }}
      commit-digest: ${{ steps.version.outputs.commit-digest }}
    steps:
    - uses: actions/checkout@v4
    - name: version
      id: version
      uses: gardener/cc-utils/.github/actions/version
      with:
        version-operation: ${{ inputs.version-operation }}

  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    needs:
      - params
      - version
    strategy:
      matrix:
        image:
          - name: concourse-worker
            dockerfile: concourse-worker.dockerfile
            oci_platforms: ${{ needs.params.outputs.oci_platforms }}
            # todo: handle build-args
            labels: |
              - name: gardener.cloud/cve-categorisation
                value:
                  network_exposure: public
                  authentication_enforced: true
                  user_interaction: gardener-operator
                  confidentiality_requirement: high
                  integrity_requirement: high
                  availability_requirement: high
          - name: concourse-web
            dockerfile: concourse-web.dockerfile
            oci_platforms: linux/amd64
            labels: |
              - name: gardener.cloud/cve-categorisation
                value:
                  network_exposure: public
                  authentication_enforced: true
                  user_interaction: gardener-operator
                  confidentiality_requirement: high
                  integrity_requirement: high
                  availability_requirement: high
          - name: concourse-resource-git
            dockerfile: concourse-resource-git.dockerfile
            oci_platforms: ${{ needs.params.outputs.oci_platforms }}
            labels: |
              - name: gardener.cloud/cve-categorisation
                value:
                  network_exposure: protected
                  authentication_enforced: false
                  user_interaction: gardener-operator
                  confidentiality_requirement: low
                  integrity_requirement: high
                  availability_requirement: low
          - name: concourse-resource-time
            dockerfile: concourse-resource-time.dockerfile
            oci_platforms: ${{ needs.params.outputs.oci_platforms }}
            labels: |
              - name: gardener.cloud/cve-categorisation
                value:
                  network_exposure: protected
                  authentication_enforced: false
                  user_interaction: gardener-operator
                  confidentiality_requirement: none
                  integrity_requirement: high
                  availability_requirement: none
    outputs:
      strategy: ${{ toJSON(strategy) }}

    steps:
      - uses: actions/checkout@v4
      - name: prebuild-hook
        if: ${{ matrix.image.name == 'concourse-worker' }}
        run: |
          ./prebuild-registry-resource.sh
      - name: Authenticate against OCI-Registry
        uses: gardener/cc-utils/.github/actions/oci-auth@master
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          oci-image-reference: ${{ needs.params.outputs.oci_repository }}
      - name: Build OCI Image
        uses: gardener/cc-utils/.github/actions/ocm-oci-build@master
        with:
          name: ${{ matrix.image.name }}
          repository: ${{ needs.params.outputs.oci_repository}}/${{ matrix.image.name }}
          version: ${{ needs.version.outputs.effective_version }}
          ocm_labels: ${{ matrix.image.labels }}
          oci_platforms: ${{ matrix.image.oci_platforms }}
          context: .
          dockerfile: ${{ matrix.image.dockerfile }}

  base-component-descriptor:
    needs:
      - version
      - params
    uses: gardener/cc-utils/.github/workflows/base-component-descriptor.yaml@master
    with:
      version: ${{ needs.version.outputs.version }}
      ocm-repo: ${{ needs.params.outputs.ocm_repository }}
      commit-digest: ${{ needs.version.outputs.commit-digest }}
      labels: |
        - name: cloud.gardener.cnudie/responsibles
          value:
            - type: githubTeam
              teamname: gardener/ci-maintainers
              github_hostname: github.com
        - name: cloud.gardener.cnudie/dso/scanning-hints/source_analysis/v1
          value:
            policy: skip
            comment: |
              the repository does not contain source code, but only the
              build-description of concourse-ci

  component_descriptor:
    runs-on: ubuntu-latest
    outputs:
      component-descriptor: ${{ steps.gen.outputs.component-descriptor }}
    container:
      image: python:alpine
    permissions:
      contents: write
      id-token: write
    needs:
      - build
      - base-component-descriptor
    steps:
      - name: install gardener-gha-libs
        uses: gardener/cc-utils/.github/actions/install-gardener-gha-libs@master
      - name: merge ocm-resource-fragments
        uses: actions/upload-artifact/merge@v4
        with:
          name: ocm-oci-resources
          # only merge ocm-fragments emitted from ocm-oci-build-action
          pattern: ocm-oci-build*
          separate-directories: true
          delete-merged: true
      - name: download-ocm-oci-resources
        uses: actions/download-artifact@v4
        with:
          name: ocm-oci-resources
          path: ocm-oci-resources.d

      - name: generate OCM Component-Descriptor
        id: gen
        run: |
          env | sort

          echo "base component-descriptor"
          echo "${{ needs.base-component-descriptor.outputs.component-descriptor }}" \
           > component-descriptor.yaml
          cat component-descriptor.yaml

          for rf in $(find ocm-oci-resources.d -type f -name ocm-resources.yaml); do
            echo "adding ocm-resources from ${rf}"
            cat ${rf} | gardener-ocm \
              append resource \
              --file component-descriptor.yaml
          done

          echo "Component-Descriptor ready to be uploaded:"

          cat component-descriptor.yaml
          echo 'component-descriptor<<EOF' >> ${GITHUB_OUTPUT}
          cat component-descriptor.yaml
          echo EOF >> ${GITHUB_OUTPUT}

      - name: authenticate
        uses: gardener/cc-utils/.github/actions/oci-auth@master
      - name: upload OCM Component-Descriptor
        run: |
          echo "uploading component-descriptor"
          gardener-ocm \
            upload \
            --file component-descriptor.yaml
